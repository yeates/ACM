#include <bits/stdc++.h>
#define LL long long
#define MS(a) memset(a, 0, sizeof(a))
#define FOR(i, a, b) for(int i = a; i <= a; i++)
#define REP(i, n)   FOR(i, 0, n-1)
#define FORD(i, a, b) for(int i = a; i >= b; i--)
#define PI acos(-1)
#define pb push_back
#define fi first
#define se second
#define eps 1e-10
#define INF 0x3f3f3f3f
using namespace std;
const LL MOD = 1000000007;
#define MAX 105

struct node{
    int l, r;
    int sum;
}a[4 * MAX];

void build(int i, int l, int r){
    a[i].l = l, a[i].r = r;
    if(l == r){
        scanf("%d", &a[i].sum);
        return;
    }
    int mid = (r - l) / 2 + l;
    build(i * 2, l, mid);
    build(i * 2 + 1, mid + 1, r);
    a[i].sum = a[i * 2].sum + a[i * 2 + 1].sum;
}

void update(int i, int l, int r, int key){
    if(a[i].l == l && a[i].r == r){
        a[i].sum += key;
        return;
    }
    int mid = (r - l) / 2 + l;
    update(i*2, l, mid);
    update(i*2+1, mid+1, r);
    a[i].sum = a[i*2].sum + a[i*2+1].sum;
}

int query(int i, int l, int r){
    if(a[i].l == l && a[i].r == r)
        return a[i].sum;
    int mid = (r - l) / 2 + l;
    int ans = 0;
    if(a[i].r <= mid){
        ans += query(i*2, l, r);
    }
    else if(a[i].l > mid){
        ans += query(i*2+1, l, r);
    }
    else{
        ans += query(i*2, l, mid);
        ans += query(i*2+1, mid+1, r);
    }
    return ans;
}

int main(){
    while(cin >> n){
        REP(i, n-1){
            cin >> s[i];
        }
        cout << upper_bound(s, s + n, 3) << endl;
    }
    return 0;
}
